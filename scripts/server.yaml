
poweroff_server_script:
  alias: Spegni server
  sequence:
    - service: notify.notifiche_u
      data:
        title: '*Server*'
        message: Nessuno sta usando il server, spegnimento in corso
    - service: rest_command.umount_hd
    - delay: '00:00:20'
    - service: switch.turn_off
      data:
        entity_id: switch.outlet_b44d
    - delay: '00:00:05'
    - service: script.update_hd_stats
    - service: input_boolean.turn_off
      data:
        entity_id: input_boolean.alexa_check_server_state
        
do_not_poweroff_server_script:
  alias: Non spegnere Server
  sequence:
    - service: notify.notifiche_u
      data:
        title: '*Server*'
        message: Qualcuno sta usando il server, impossibile spegnere
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.server_control_on_off
    - service: input_boolean.turn_on
      data:
        entity_id: input_boolean.alexa_check_server_state

reboot_server_script:
  alias: Riavvia Server
  sequence:
    - service: rest_command.reboot_server
    - service: notify.notifiche_u
      data:
        title: '*Server*'
        message: Riavvio Server in corso
        
alexa_reboot_server_script:
  alias: Alexa avvisa server riavviato
  sequence:
    - service: media_player.volume_set
      data_template: 
        entity_id: '{{ states.sensor.last_alexa.state }}' 
        volume_level: '0.2'
    - delay: '00:00:01'
    - service: notify.alexa_media
      data_template:
        target: '{{ states.sensor.last_alexa.state }}' 
        message: >
          {% if is_state('switch.outlet_b44d', 'on')%}
          "Va bene, riavvio il server....aspetta qualche minuto"
          {% else %}
          "Il Server è spento, non posso riavviarlo"
          {% endif %}
        data:
          type: "tts"
          
# reboot_ftp_server_script:
#   alias: Riavvia FTP
#   sequence:
#     - service: shell_command.ftp_server_stop
#     - delay: '00:00:05'
#     - service: shell_command.ftp_server_start
#     - service: notify.notifiche_u
#       data:
#         title: '*Server*'
#         message: Server FTP riavviato
        
# stop_ftp_server_script:
#   alias: Stoppa FTP server
#   sequence:
#     - service: shell_command.ftp_server_stop
#     - service: notify.notifiche_u
#       data:
#         title: '*Server*'
#         message: Server FTP stoppato
        
# start_ftp_server_script:
#   alias: Avvia FTP server
#   sequence:
#     - service: shell_command.ftp_server_start
#     - service: notify.notifiche_u
#       data:
#         title: '*Server*'
#         message: Server FTP avvitato
        
server_mount_script:
  alias: Monta HD
  sequence:
    - service: rest_command.mount_hd
    - service: notify.notifiche_u
      data:
        title: '*Server*'
        message: Monta HD
    - delay: '00:00:20'
    - service: script.update_hd_stats
    
server_umount_script:
  alias: Smonta HD
  sequence:
    - service: rest_command.umount_hd
    - service: notify.notifiche_u
      data:
        title: '*Server*'
        message: Smonta HD
    - delay: '00:00:20'
    - service: script.update_hd_stats
        
# check_ftp_status_script:
#   alias: Controllo stato FTP
#   sequence:
#     - service: shell_command.update_ftp_status
#     - service: notify.notifiche_u
#       data_template:
#         title: '*Server*'
#         message: >
#           {% if is_state('sensor.ftp_status', '')%}
#           "Server FTP offline"
#           {% else %}
#           "Server FTP online"
#           {% endif %}

update_hd_stats:
  alias: update_hd_stats
  sequence:
    - service: homeassistant.update_entity
      data:
        entity_id:
        - sensor.hitachi_rest
        - sensor.wd_rest
        - sensor.wd2_rest
        - sensor.toshiba_rest
update_smb_status:
  alias: update_smb_status
  sequence:
    - service: homeassistant.update_entity
      data:
        entity_id:
        - sensor.smb_status_rest

check_smb_status_script:
  alias: Controllo stato SMB
  sequence:
    - service: homeassistant.update_entity
      entity_id: sensor.smb_status_rest
    - delay: '00:00:05'
    - service: notify.notifiche_u
      data_template:
        title: '*Server*'
        message: >
          {% if is_state('sensor.smb_status_rest', 'Occupato')%}
          Server occupato, non puoi spegnerlo
          {% else %}
          Server libero, puoi spegnerlo se vuoi
          {% endif %}

alexa_check_smb_status_master_script:
  alias: Alexa avvisa sullo stato del server
  sequence:
    - service: media_player.volume_set
      data_template: 
        entity_id: '{{ states.sensor.last_alexa.state }}' 
        volume_level: '0.25'
    - delay: '00:00:01'
    - service: notify.alexa_media
      data_template:
        target: '{{ states.sensor.last_alexa.state }}' 
        message: >
          {% if is_state('switch.outlet_b44d', 'on')%}
          "Il Server è acceso"
          {% else %}
          "Il Server è spento"
          {% endif %}
        data:
          type: "tts"
